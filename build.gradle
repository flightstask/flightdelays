buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'scala'
    id "de.undercouch.download" version "3.1.2"
    id "com.github.maiflai.scalatest" version "0.14"
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    sparkVersion = '2.0.1'
    scalaVersion = '2.11'
}

dependencies{
    compile "org.apache.spark:spark-core_${scalaVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-sql_${scalaVersion}:${sparkVersion}"
    compile "com.databricks:spark-csv_${scalaVersion}:1.5.0"

    // ScalaTest
    testCompile "org.scalatest:scalatest_${scalaVersion}:2.2.6"
    testRuntime 'org.pegdown:pegdown:1.6.0'
}

test {
    maxParallelForks = 1
}

task getData << {
    download {
        src([
            'http://stat-computing.org/dataexpo/2009/1999.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2000.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2001.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2002.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2003.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2004.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2005.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2006.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2007.csv.bz2',
            'http://stat-computing.org/dataexpo/2009/2008.csv.bz2'
        ])
        dest "data"
        overwrite false
    }
}

task convertToParquet(type: JavaExec, dependsOn:[build, getData]) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.spark.deploy.SparkSubmit'
    args(
        "--master=local",
        "--class=ConvertToParquet",
        "build/libs/plains.jar",
        "data",
        "parquet_data"
    )
}

task busyAirports(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.spark.deploy.SparkSubmit'
    args(
        "--master=local[*]",
        "--class=BusyAirports",
        "build/libs/plains.jar",
        "parquet_data",
        "output/1_busyAirports.csv"
    )
}

task worstDelayRoutes(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.spark.deploy.SparkSubmit'
    args(
        "--master=local[*]",
        "--class=WorstDelayRoutes",
        "build/libs/plains.jar",
        "parquet_data",
        "output/2_delayedRoutes.csv"
    )
}

task delayProbability(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.spark.deploy.SparkSubmit'
    args(
        "--master=local[*]",
        "--class=DelayProbability",
        "build/libs/plains.jar",
        "parquet_data",
        "output/3_delayProbability.csv",
        project.hasProperty("minCount") ? minCount : 0
    )
}
